@startuml FindReply
!includeurl https://raw.githubusercontent.com/momenttech/plantuml/master/globals/commons.puml
'!include ./globals/commons.puml
'skinparam linetype ortho
'skinparam linetype polyline
'left to right direction
'top to bottom direction
skinparam nodesep 30
skinparam ranksep 20
skinparam componentStyle uml2

skinparam Entity<<ADMIN>>{
    FontColor black
	BorderColor $PURPLE
	BackgroundColor #Red/Yellow
}
skinparam Entity<<FAISS>>{
    FontColor black
	BorderColor $PURPLE
	BackgroundColor #Blue/White
}
skinparam arrow<<TEST>> {
	Thickness 1
	Color $SUCCESS
	FontColor $FGCOLOR
}

skinparam arrow<<INTRA>> {
	Color $GRAY
}

!procedure $make_docker_config($display)
    !if ($display != "")
        $DockerConfig("FindReplyModule") {
            !if ($display == "all") || ($display == "variables")
                $DockerVariables("FindReplyModule", \
                                "RMQ_IP: <i>RMQ broker</i>,\n\
                                QUESTIONS_QUEUE = Questions from RASA\n\
                                Ex: tbott-rpc.<i>dom.proj</i>", \
                                \
                                "RMQ_USER = ...\n\
                                RMQ_PASSWD = ...\n\
                                ENCODER_QUEUE = <i>tbott-encoder</i>\n\
                                MATCHING_QUEUE = <i>tbott-matching</i>\n\
                                NB_INSTANCES = <i>5</i>\n\
                                RMQ_PORT = <i>5672</i>\n\
                                LOG_LEVEL= <i>INFO</i>")
            !endif
            ' !if ($display == "all") || ($display == "ports")
            '     $DockerPorts("FindReplyModule",\
            '                 "127.0.0.1:<b>14002</b>")
            ' !endif
            !if ($display == "all") || ($display == "volumes")
                $DockerVolumes("FindReplyModule",\
                            "<b>logs</b> -> /var/log/supervisor")
            !endif
            !if ($display == "all") || ($display == "extra")
                '$DockerExtra("FindReplyModule", "test", "content")
            !endif
        }
    !endif
!endprocedure

!procedure $make_content($display)
    !if ($display == "all") || ($display == "TestingInterface")
        frame "Internal Testing" as TestingInterface {
            component MSG_T [
                [[http://10.165.64.205/AI/Messaging Messaging]] lib
                ----
                <color:teal>zeromq.ThreadedWorker(</color>
                <color:teal>    <i><b>callback_func</b></i>,</color>
                <color:teal>    127.0.0.1,</color>
                <color:teal>    <b>14002</b></color>
                <color:teal>    <b>nb_workers=1</b>)</color>
                ]
        }
        TestFindings o-d-> MSG_T<<TEST>>
        'EntryPoint -[hidden]-> TestingInterface
    !endif

    !if ($display == "all") || ($display == "EntryPoint")
        $Multithreaded("EntryPoint", "Entry Point", "NB_INSTANCES") {
            component MSG_C [
                [[http://10.165.64.205/AI/Messaging Messaging]] lib
                ----
                <i><color:teal>treaded_rpc.worker(</color></i>
                <i><color:teal>host=<b>$RMQ_IP</b></color></i>
                <i><color:teal>username=$RMQ_USER</color></i>
                <i><color:teal>password=$RMQ_PASSWD</color></i>
                <i><color:teal>rpc_queue=$QUESTION_QUEUE</color></i>
                <i><color:teal>port=$RMQ_PORT)</color></i>
                ----
                on_request(msg)
                ]
        }
        FindReplyRMQ o-r0)-> EntryPoint: Consume\nRPC\nmsg
    !endif
    
    !if ($display == "all") || ($display == "SearchBest")
        frame "Search Best" as SearchBest {
            [if type == "question":\n > get N1/N2 contexts @ 127.0.0.1:14001\n > extend question list] as GetCtx
            [get vectors @ $ENCODER_QUEUE] as GetVects
            [get candidates IDs from FAISS @ 127.0.0.1:14000\nrearange IDs] as AskFaiss
            [get IDs' <b>questions</b> and <b>replies</b> from Admin] as GetVectAdm
            [create list of paired vectors\nget best Matching @ $MATCHING_QUEUE] as getBestMatching
            [return best] as RetBet

        }
        MSG_C ..> GetCtx: "Search Q.\nThread 1..N"
        !if ($display == "all")
            MSG_T --> GetCtx<<TEST>>: "Test Q."
        !endif

        RetBet -[hidden]-> GetCtx
        GetCtx -down-> GetVects<<INTRA>>
        GetVects -down-> AskFaiss<<INTRA>>
        AskFaiss -down-> GetVectAdm<<INTRA>>
        GetVectAdm -down-> getBestMatching<<INTRA>>
        getBestMatching -u-> RetBet<<INTRA>>

        RetBet -u-> MSG_C
        !if ($display == "all")
            RetBet -u-> MSG_T<<TEST>>
        !endif
            
        'GetCtx <-left-> Admin
        GetCtx o-l-> Admin1
        GetVects o-l0)-> Encoder: Send\nRPC request
        AskFaiss o-l-> Faiss
        GetVectAdm o-l-> Admin2
        getBestMatching o-l0)-> Matcher: Send\nRPC request

    !endif

!endprocedure


@enduml